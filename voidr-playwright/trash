    def addItemToCart(self):
        # selectedItem = random.choice(self.page.get_by_role('button', name='Add to cart'))
        # self.page.click(f'button[name="add-to-cart-{random.choice("*")}"]')
        # allItems = self.page.locator("[data-test^='add-to-cart']")
        # availableItems = allItems.count()
        # desiredItem = random.choice(range(availableItems))
        # allItems.nth(desiredItem).click()
        # Mapeia todos os botões "Add to Cart" na página

    def removeItemFromCart(self):
        itemsToRemove = self.page.locator("[data-test^='remove']")
        selectedItem = random.choice(self.page.get_by_test_id(name='remove[.*]'))
        selectedItem.click()

        def sortItemsByName(self, order: str):
        # filterButton = self.page.query_selector('[class="product_sort_container"]')
        # filterButton.click()
        # self.page.wait_for_selector('.select_container .select_dropdown')  # Wait for the dropdown to appear

        # if order == 'asc':
        #     sortOption = self.page.wait_for_selector('[value="az"]')
        # else:
        #     sortOption = self.page.query_selector('[value="za"]')

        if order == 'asc':
            # sortOption =
            # self.page.query_selector('option:text("Name (A to Z)")').click()
            self.page.select_option('select[data-test="product_sort_container"]', 'az')
        else:
            # sortOption =
            # self.page.query_selector('option:text("Name (Z to A)")').click()
            self.page.select_option('select[data-test="product_sort_container"]', 'za')
        # sortOption.click()

    def sortItemsByPrice(self, order: str):
        filterButton = self.page.get_by_test_id('active-option')
        filterButton.click()
        if order == 'asc':
            sortOption = self.page.get_by_text('Price (low to high)')
        else:
            sortOption = self.page.get_by_text('Price (high to low)')
        sortOption.click()

def testSortProductsByName(page):
    loginPage = LoginPage(page)
    loginPage.navigate('https://saucedemo.com')
    loginPage.login("standard_user", "secret_sauce")

    homePage = HomePage(page)
    homePage.sortItemsByName(order='asc')

    # Verifica se os produtos estão ordenados por nome
    product_names = [elem.text_content() for elem in homePage.page.query_selector_all('.inventory_item_name')]
    assert product_names == sorted(product_names)

def testSortProductsByPrice(page):
    loginPage = LoginPage(page)
    loginPage.navigate('https://saucedemo.com')
    loginPage.login("standard_user", "secret_sauce")

    homePage = HomePage(page)
    homePage.sortItemsByPrice(order='asc')

    # Verifica se os produtos estão ordenados por preço
    product_prices = [float(elem.text_content().replace('$', '')) for elem in homePage.page.query_selector_all('.inventory_item_price')]
    assert product_prices == sorted(product_prices)